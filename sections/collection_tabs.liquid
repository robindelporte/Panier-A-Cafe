<style>
  .button.is-tab-button {
    opacity: 60%;
  }
  .button.is-tab-button.is-active {
    opacity: 100%;
  }
</style>
<div class="padding-global padding-section-medium">
  <div class="container-large">
    <div x-data="{tab: {{section.index}}1}" class="category_wrapper">
      <div class="category_top">
        <div role="tablist" li-for:inside="collection in section.settings.collection_list" class="tab_menu">
          {% for collection in section.settings.collection_list %}
            <button
              role="tab"
              x-on:click="tab = {{section.index}}{{forloop.index}}"
              aria-controls="collection-tab-{{section.index}}{{forloop.index}}"
              id="collection-button-{{section.index}}{{forloop.index}}"
              x-bind:aria-selected="tab === {{section.index}}{{forloop.index}} ? 'true' : 'false'"
              x-bind:class="tab === {{section.index}}{{forloop.index}} ? 'is-active' : ''"
              class="button is-tab-button"
            >
              <div li-object="collection.title">{{ collection.title }}</div>
            </button>
          {% endfor %}
        </div>
      </div>
      <div li-for:inside="collection in section.settings.collection_list" class="tab_body">
        {% for collection in section.settings.collection_list %}
          <div
            id="collection-tab-{{section.index}}{{forloop.index}}"
            role="tabpanel"
            aria-labelledby="collection-button-{{section.index}}{{forloop.index}}"
            x-show="tab === {{section.index}}{{forloop.index}}"
            class="category_tab-panel"
          >
            <div class="splide slider">
              <div class="splide__track">
                <div li-for:inside="product in collection.products limit: 4" class="splide__list">
                  {% for product in collection.products limit: 4 %}
                    <div class="splide__slide">{% render 'product_item', product: product %}</div>
                  {% endfor %}
                </div>
              </div>
            </div>
            <a li-object:href="collection.url" href="{{ collection.url }}" class="button is-secondary w-button"
              >En voir plus</a
            >
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>
<div class="hide w-embed"></div>
<div class="hide w-embed w-script">
  <script>
  let splideInstances = [];

  function initSplideSliders() {
    console.log('=== DEBUT INIT SPLIDE ===');
    
    const isMobileOrTablet = window.innerWidth < 992;
    console.log('Window width:', window.innerWidth, 'isMobileOrTablet:', isMobileOrTablet);
    
    // Détruire toutes les instances existantes
    console.log('Destruction des instances existantes:', splideInstances.length);
    splideInstances.forEach(splide => {
      try {
        splide.destroy();
      } catch (e) {
        console.log('Erreur destruction:', e);
      }
    });
    splideInstances = [];
    
    if (isMobileOrTablet) {
      // Chercher tous les sliders
      const sliders = document.querySelectorAll('.splide.slider');
      console.log('Sliders trouvés:', sliders.length);
      
      sliders.forEach((sliderEl, index) => {
        console.log(`Processing slider ${index + 1}:`, sliderEl);
        
        // Vérifier si Splide est disponible
        if (typeof Splide === 'undefined') {
          console.error('Splide n\'est pas défini ! Vérifiez que la librairie est chargée.');
          return;
        }
        
        try {
          const splide = new Splide(sliderEl, {
            perPage: 4,
            perMove: 1,
            focus: 0,
            type: 'slide',
            gap: '40px',
            arrows: false,
            pagination: true,
            speed: 600,
            dragAngleThreshold: 30,
            autoWidth: false,
            rewind: false,
            rewindSpeed: 400,
            waitForTransition: false,
            updateOnMove: true,
            trimSpace: false,
            breakpoints: {
              991: {
                perPage: 2,
                gap: '32px',
              },
              767: {
                perPage: 1.5,
                gap: '20px',
              },
              479: {
                perPage: 1,
                gap: '16px',
              }
            }
          });
          
          console.log('Splide créé pour slider', index + 1, '- mounting...');
          splide.mount();
          console.log('Splide monté avec succès pour slider', index + 1);
          
          splideInstances.push(splide);
        } catch (error) {
          console.error('Erreur création Splide pour slider', index + 1, ':', error);
        }
      });
      
      console.log('Total instances créées:', splideInstances.length);
    } else {
      console.log('Mode desktop - pas d\'initialisation Splide');
    }
    
    console.log('=== FIN INIT SPLIDE ===');
  }

  // Test immédiat pour vérifier si Splide est chargé
  console.log('Splide disponible ?', typeof Splide !== 'undefined');
  console.log('Sliders présents ?', document.querySelectorAll('.splide.slider').length);

  // Initialiser au chargement
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded - init Splide');
    initSplideSliders();
  });
  
  // Réinitialiser au resize
  window.addEventListener('resize', () => {
    console.log('Resize détecté');
    clearTimeout(window.splideTimer);
    window.splideTimer = setTimeout(initSplideSliders, 200);
  });
  
  // Réinitialiser lors des clics (changement de tabs)
  document.addEventListener('click', (e) => {
    console.log('Clic détecté sur:', e.target);
    setTimeout(initSplideSliders, 100);
  });
  
  // Fonction debug accessible globalement
  window.debugSplide = initSplideSliders;
  </script>
</div>
{% schema %} {"tag":"section","name":"Collection Tabs","class":"section_category","settings":[{"type":"collection_list","id":"collection_list","label":"Collections","limit":8}],"presets":[{"name":"Collection Tabs","category":"Liquify","blocks":[]}]} {% endschema %}
