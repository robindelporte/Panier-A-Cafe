<!doctype html>
<html
  data-wf-page="680ba29c8df9fdc50a9591df"
  data-wf-site="68025cbd2676ca8827196077"
  lang="{{ request.locale.iso_code }}"
>
  <head>
    <meta charset="utf-8">
    <title>{{ page_title }}</title>
    <meta content="{{ page_description }}" name="description">
    <meta content="{{ page_title }}" property="og:title">
    <meta content="{{ page_description }}" property="og:description">
    <meta content="{{ page_title }}" property="twitter:title">
    <meta content="{{ page_description }}" property="twitter:description">
    <meta property="og:type" content="website">
    <meta content="summary_large_image" name="twitter:card">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <meta content="Webflow" name="generator">
    <link href="{{ 'normalize.css' | asset_url }}" rel="stylesheet" type="text/css">
    <link href="{{ 'webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
    <link href="{{ 'panier-a-cafe.webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script>
    <script type="text/javascript">
      WebFont.load({  google: {    families: ["Oswald:200,300,400,500,600,700"]  }});
    </script>
    <script type="text/javascript">
      !function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);
    </script>
    {% if settings.favicon == blank %}
      <link href="{{ 'favicon.png' | asset_url }}" rel="shortcut icon" type="image/x-icon">
    {% else %}
      <link rel="shortcut icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
    {% endif %}

    {% if settings.apple_touch_icon == blank %}
      <link href="{{ 'webclip.png' | asset_url }}" rel="apple-touch-icon">
    {% else %}
      <link rel="apple-touch-icon" type="image/png" href="{{ settings.apple_touch_icon | img_url: '32x32' }}">
    {% endif %}

    <script defer="" src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
    <script defer="" src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
    <script defer="" src="{{ 'alpinejs3.js' | asset_url }}"></script>
    <link href="{{ canonical_url }}" rel="canonical">
    <style>
      [x-cloak] { display: none !important; }
        [li-cloak_disabled] { display: none !important; }
      /* Setup Font and Background Color if Text is selected */
      ::selection {
        color: #fff;
        background: #241f18;
      }
      ::-moz-selection {
        color: #fff;
        background: #241f18;
      }
    </style>
    <script>(()=>{var t="https://cdn.jsdelivr.net/npm/@finsweet/attributes-modal@1/modal.js",e=document.querySelector(`script[src="${t}"]`);e||(e=document.createElement("script"),e.async=!0,e.src=t,document.head.append(e));})();
    </script>
    <script defer="" src="https://cdn.jsdelivr.net/npm/@finsweet/attributes-toc@1/toc.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@flowbase-co/boosters-social-share@1.0.0/dist/social-share.min.js"
      type="text/javascript"
    ></script>
    <meta name="theme-color" content="#000" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="#fff" media="(prefers-color-scheme: dark)">
    <script defer="" src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <script type="application/ld+json">
      {
       "@context": "https://schema.org/",
       "@type": "Product",
       "name": "{{ product.title }}",
      "image": "https:{{ product.featured_image.src | img_url: '1500x1500' }}",
       "description": "{{ product.description | strip_html }}",
       "brand": "{{ product.vendor }}",
       "sku": "{{ product.selected_or_first_available_variant.sku }}",
       "offers": [
       {% for variant in product.variants %}{
         "@type": "Offer",
         "url": "{{ variant.url }}",
         "priceCurrency": "{{ cart.currency.iso_code | json }}",
         "price": "{{ variant.price | money }}",
         "itemCondition": "https://schema.org/NewCondition"
       }{% if forloop.last == false %},{% endif %}{% endfor %}
       ]
       }
    </script>
    <script type="application/ld+json">
      {
       "@context": "https://schema.org",
       "@type": "BreadcrumbList",
       "itemListElement":
       [
        {
         "@type": "ListItem",
         "position": 1,
         "item":
         {
          "@id": "{{ shop.url }}",
          "name": "Home"
          }
        },
      {
         "@type": "ListItem",
         "position": 2,
         "item":
         {
          "@id": "{% if collection.url %}{{ collection.url }}{% else %}{{ product.vendor }}{% endif %}",
          "name": "{% if collection.url %}{{collection.title }}{% else %}{{ product.vendor }}{% endif %}"
          }
        },
        {
         "@type": "ListItem",
        "position": 3,
        "item":
         {
           "@id": "{{ product.url }}",
           "name": "{{ product.title }}"
         }
        }
       ]
      }
    </script>
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [{% for fa_qs in shop.metaobjects.fa_qs.values %}{
          "@type": "Question",
          "name": "{{ fa_qs.frage }}",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "{{ fa_qs.antwort | metafield_tag | strip_html }}"
          }
        }{% if forloop.last == false %},{% endif %}{% endfor %}
        ]
      }
    </script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const deliveryElement = document.querySelector('.delivery-estimate');
        if (deliveryElement) {
          const minDays = parseInt(deliveryElement.dataset.minDays) || 2;
          const maxDays = parseInt(deliveryElement.dataset.maxDays) || 4;
          const today = new Date();
          const deliveryStart = new Date(today);
          const deliveryEnd = new Date(today);
          deliveryStart.setDate(today.getDate() + minDays);
          deliveryEnd.setDate(today.getDate() + maxDays);
          const options = { day: 'numeric', month: 'long' };
          const startDate = deliveryStart.toLocaleDateString('fr-FR', options);
          const endDate = deliveryEnd.toLocaleDateString('fr-FR', options);
          document.querySelector('.delivery-start').textContent = startDate;
          document.querySelector('.delivery-end').textContent = endDate;
        }
      });
    </script>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/dist/tippy.css">
    <style>
      .tippy-box {
        background-color: #77634F !important;
      }
      .tippy-box[data-placement^='top'] > .tippy-arrow::before {
        border-top-color: #77634F !important;
      }
      .tippy-box[data-placement^='bottom'] > .tippy-arrow::before {
        border-bottom-color: #77634F !important;
      }
      .tippy-box[data-placement^='left'] > .tippy-arrow::before {
        border-left-color: #77634F !important;
      }
      .tippy-box[data-placement^='right'] > .tippy-arrow::before {
        border-right-color: #77634F !important;
      }
    </style>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
          const originalConsoleLog = console.log;
          console.log = function(...args) {
              if (args[0] === "Liquify - Set active variant") {
                  setTimeout(() => {
                      if (window.fsAttributes && window.fsAttributes.modal && window.fsAttributes.modal.destroy) {
                          window.fsAttributes.modal.destroy();
                          window.fsAttributes.modal.init();
                      }
                  }, 100);
              }
              originalConsoleLog.apply(console, args);
          };
      });
    </script>
    <script src="{{ '_helper.js' | asset_url }}" type="text/javascript"></script>
    {{ content_for_header }}
  </head>
  <body li-page="product">
    <div class="page-wrapper">
      {% render 'global_styles' %}
      {% section 'header' %}
      {{ content_for_layout }}
      {% section 'footer' %}
    </div>
    <script
      src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=68025cbd2676ca8827196077"
      type="text/javascript"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
      crossorigin="anonymous"
    ></script>
    <script src="{{ 'webflow.js' | asset_url }}" type="text/javascript"></script>
    <script src="{{ 'section-rendering.js' | asset_url }}"></script>
    {% render 'search_javascript' %}
    <script>document.addEventListener('DOMContentLoaded', function () {
   const quantityInputs = document.querySelectorAll('[cart-number-input]');
   function updateInputValue(input, newValue) {
       input.value = newValue;
       input.dispatchEvent(new Event('input'));
       input.dispatchEvent(new Event('change'));
       // Auto-submit du formulaire
       setTimeout(() => {
           const form = input.closest('form');
           if (form) {
               form.submit();
           }
       }, 500);
   }
   quantityInputs.forEach(input => {
       const id = input.getAttribute('cart-number-input');
       const incrementButton = input.parentElement.querySelector(`[cart-number-button="increase"][data-id="${id}"]`);
       const decrementButton = input.parentElement.querySelector(`[cart-number-button="decrease"][data-id="${id}"]`);
       if (incrementButton) {
           incrementButton.addEventListener('click', function () {
               let currentValue = parseInt(input.value, 10);
               updateInputValue(input, currentValue + 1);
           });
       }
       if (decrementButton) {
           decrementButton.addEventListener('click', function () {
               let currentValue = parseInt(input.value, 10);
               if (currentValue > 1) {
                   updateInputValue(input, currentValue - 1);
               }
           });
       }
       input.addEventListener('change', function () {
           let currentValue = parseInt(this.value, 10);
           if (isNaN(currentValue) || currentValue < 1) {
               updateInputValue(this, 1);
           }
       });
   });
});
    </script>
    <script src="https://unpkg.com/youtube-light-player"></script>
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@3.2.2/dist/js/splide.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>

    <script>
      let swiperInstance = null;
      let thumbsSwiperInstance = null;

      $(".swiper-container").each(function (index) {
          thumbsSwiperInstance = new Swiper($(this).find(".swiper.is-product-thumbnail")[0], {
              slidesPerView: "auto",
              rewind: false,
              loopedSlides: 8,
              slideToClickedSlide: true,
              spaceBetween: "4%",
          });

          swiperInstance = new Swiper($(this).find(".swiper.is-product-gallery")[0], {
              mousewheel: {
                  forceToAxis: true
              },
              thumbs: {
                  swiper: thumbsSwiperInstance,
                  slideThumbActiveClass: "is-active",
              },
              keyboard: {
                  enabled: true,
                  onlyInViewport: true
              },
              navigation: {
                  nextEl: $(this).find(".swiper-next")[0],
                  prevEl: $(this).find(".swiper-prev")[0],
              },
              pagination: {
                  el: $(this).find(".swiper_pagination")[0],
                  bulletActiveClass: "is-active",
                  bulletClass: "swiper_bullet",
                  clickable: true,
                  dynamicBullets: false,
              },
              breakpoints: {
                  768: {
                      pagination: {
                          enabled: false,
                      }
                  }
              }
          });
      });

      function syncSwiperWithVariant(selectedVariant) {
          if (!swiperInstance) return;

          const slides = document.querySelectorAll('.swiper-slide.is-product-gallery img');
          let targetIndex = 0;
          let found = false;
          let variantImageSrc = null;

          if (selectedVariant.featured_image && typeof selectedVariant.featured_image === 'object') {
              variantImageSrc = selectedVariant.featured_image.src;

              if (selectedVariant.featured_image.id) {
                  const imageId = selectedVariant.featured_image.id.toString();
                  slides.forEach((img, index) => {
                      const imgSrc = img.getAttribute('src') || '';
                      if (imgSrc.includes(imageId)) {
                          targetIndex = index;
                          found = true;
                      }
                  });
              }
          } else if (selectedVariant.featured_image && typeof selectedVariant.featured_image === 'string') {
              variantImageSrc = selectedVariant.featured_image;
          } else if (selectedVariant.featured_media && selectedVariant.featured_media.preview_image) {
              variantImageSrc = selectedVariant.featured_media.preview_image.src;
          }

          if (!found && variantImageSrc) {
              const cleanUrl = variantImageSrc.replace(/^\/\//, 'https://');
              const fileName = cleanUrl.split('/').pop().split('?')[0];

              slides.forEach((img, index) => {
                  const imgSrc = img.getAttribute('src') || '';
                  const slideFileName = imgSrc.split('/').pop().split('?')[0];

                  if (slideFileName === fileName) {
                      targetIndex = index;
                      found = true;
                  }
              });
          }

          if (!found && variantImageSrc) {
              slides.forEach((img, index) => {
                  const imgSrc = img.getAttribute('src') || '';
                  const cleanImgSrc = imgSrc.replace(/^\/\//, 'https://').split('?')[0];
                  const cleanVariantSrc = variantImageSrc.replace(/^\/\//, 'https://').split('?')[0];

                  if (cleanImgSrc === cleanVariantSrc) {
                      targetIndex = index;
                      found = true;
                  }
              });
          }

          if (!found && variantImageSrc) {
              const fileName = variantImageSrc.split('/').pop().split('?')[0].replace('.webp', '');

              slides.forEach((img, index) => {
                  const imgSrc = img.getAttribute('src') || '';

                  if (imgSrc.includes(fileName)) {
                      targetIndex = index;
                      found = true;
                  }
              });
          }

          swiperInstance.slideTo(targetIndex, 300);
      }

      document.addEventListener('DOMContentLoaded', function() {
          const variantInputs = document.querySelectorAll('input[data-selectortype="radio"]');

          variantInputs.forEach(input => {
              input.addEventListener('change', function() {
                  setTimeout(() => {
                      const productContainer = document.querySelector('[x-data*="handleVariant"]');
                      if (productContainer && productContainer._x_dataStack) {
                          const alpineData = productContainer._x_dataStack[0];
                          if (alpineData.selected_or_first_available_variant) {
                              syncSwiperWithVariant(alpineData.selected_or_first_available_variant);
                          }
                      }
                  }, 100);
              });
          });
      });
    </script>

    <script>
      let splideInstances = [];
      function initSplideSliders() {
        const isDesktop = window.innerWidth >= 992; // Desktop = 992px et +
        const sliders = document.querySelectorAll('.splide.slider');
        sliders.forEach((sliderEl, index) => {
          const existing = splideInstances[index];
          // D&eacute;truire l'instance existante
          if (existing) {
            existing.destroy();
            splideInstances[index] = null;
          }
          // N'initialiser Splide QUE sur mobile/tablette
          if (!isDesktop) {
            const splide = new Splide(sliderEl, {
              perPage: 2,
              perMove: 1,
              gap: '20px',
              arrows: false,
              pagination: true,
              drag: true,
              breakpoints: {
                768: {
                  perPage: 2,
                  gap: '16px',
                },
                576: {
                  perPage: 1.2,
                  gap: '12px',
                },
                480: {
                  perPage: 1,
                  gap: '8px',
                }
              }
            });
            splide.mount();
            splideInstances[index] = splide;
          }
        });
      }
      document.addEventListener('DOMContentLoaded', initSplideSliders);
      window.addEventListener('resize', () => {
        clearTimeout(window.__splideResizeTimer);
        window.__splideResizeTimer = setTimeout(initSplideSliders, 200);
      });
    </script>
    <script src="https://unpkg.com/@popperjs/core@2/dist/umd/popper.min.js"></script>
    <script src="https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.js"></script>
    <script>
      document.addEventListener('alpine:initialized', () => {
          tippy('[data-tippy-content]');
      });
    </script>
  </body>
</html>
